%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE

%start exp
%nonassoc LOWER_THAN_ELSE
%nonassoc ELSE
%nonassoc ASSIGN OF
%left OR AND
%nonassoc EQ NEQ LE LT GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%%

/* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar.
 */



exp:    lvalue
   |    NIL
   |    sequence
   |    no_value
   |    INT
   |    STRING
   |    negation
   |    function_call
   |    record_create
   |    array_create
   |    assignment
   |    if_state
   |    while
   |    for
   |    BREAK
   |    let_exp
   |    parentheses
   |    algebra

algebra: exp OR exp
       | exp AND exp
       | exp EQ exp
       | exp NEQ exp
       | exp LE exp
       | exp LT exp
       | exp GT exp
       | exp GE exp
       | exp PLUS exp
       | exp MINUS exp
       | exp TIMES exp
       | exp DIVIDE exp

lvalue: ID
      | lvalue_prime
lvalue_prime: ID DOT ID lvalue_prime_two
            | ID LBRACK exp RBRACK lvalue_prime_two
lvalue_prime_two: %empty
                | DOT ID lvalue_prime_two
                | LBRACK exp RBRACK lvalue_prime_two

sequence: LPAREN sequence_one
sequence_one: exp sequence_two
sequence_two: SEMICOLON sequence_three
sequence_three: exp sequence_four
sequence_four: RPAREN
             | sequence_two

no_value: LPAREN RPAREN
        | LET decs IN END

negation: MINUS exp %prec UMINUS

function_call:  ID LPAREN RPAREN
             |  ID LPAREN exp function_call_one RPAREN
function_call_one: %empty
                 | COMMA exp function_call_one

record_create:  ID LBRACE record_create_one RBRACE
record_create_one: %empty
                 | ID EQ exp record_create_two
record_create_two: %empty
                 | record_create_two COMMA ID EQ exp

array_create: ID LBRACK exp RBRACK OF exp

assignment: lvalue ASSIGN exp

if_state: IF exp THEN exp %prec LOWER_THAN_ELSE
        | IF exp THEN exp ELSE exp

while: WHILE exp DO exp

for: FOR ID ASSIGN exp TO exp DO exp

let_exp: LET decs IN exp_sequence END
exp_sequence: exp SEMICOLON exp_sequence
            | exp

parentheses: LPAREN exp RPAREN

decs: decs dec
    | %empty
dec: tydec
   | vardec
   | fundec

tydec: TYPE ID EQ ty

ty: ID
  | LBRACE tyfields RBRACE
  | ARRAY OF ID
tyfields: %empty
        | ID COLON ID tyfields_one
tyfields_one: %empty
            | COMMA ID COLON ID

vardec: VAR ID ASSIGN exp
      | VAR ID COLON ID ASSIGN exp

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

