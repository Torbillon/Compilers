%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
    A_dec dec;
    A_ty ty;
    A_decList decList;
    A_expList expList;
    A_field field;
    A_fieldList fieldList;
    A_fundec fundec;
    A_fundecList fundecList;
    A_namety namety;
    A_nametyList nametyList;
    A_efield efield;
    A_efieldList efieldList;

	}

%token <sval> ID STRING
%token <ival> INT

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE

%type <exp> exp program lvalue sequence
%type <expList> sequence_one sequence_two sequence_three sequence_four


%start program

%%

program:   exp    {absyn_root=$1;}

exp:    lvalue     {$$=$1;}
   |    NIL        {$$=A_NilExp(EM_tokPos);}
   |    sequence   {$$=$1;}
lvalue: ID                               {$$=A_VarExp(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)));}
sequence: LPAREN sequence_one            {$$=A_SeqExp(EM_tokPos,$2);}
sequence_one: exp sequence_two           {$$=A_expList($1,$2);}
sequence_two: SEMICOLON sequence_three   {$$=$2;}
sequence_three: exp sequence_four        {$$=A_expList($1,$2);}
sequence_four: RPAREN                    {$$=A_expList(NULL,NULL);}
             | sequence_two              {$$=$1;}

	


	

