%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
    A_dec dec;
    A_ty ty;
    A_decList decList;
    A_expList expList;
    A_field field;
    A_fieldList fieldList;
    A_fundec fundec;
    A_fundecList fundecList;
    A_namety namety;
    A_nametyList nametyList;
    A_efield efield;
    A_efieldList efieldList;

	}

%token <sval> ID STRING
%token <ival> INT

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE

%nonassoc ID
%nonassoc LOWER_THAN_ELSE
%nonassoc ELSE DO
%nonassoc ASSIGN OF
%left OR AND
%nonassoc EQ NEQ LE LT GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%type <exp> exp program sequence negation function_call record_create array_create assignment if_state while for let_exp exp_sequence parentheses algebra
%type <var> lvalue lvalue_one
%type <expList> sequence_one sequence_two function_call_one exp_sequence_one
%type <efieldList> record_create_one record_create_two
%type <decList> decs
%type <dec> dec vardec
%type <nametyList> tydec
%type <fundecList> fundec
%type <ty> ty
%type <fieldList> tyfields tyfields_one
%start program

%%

program:   exp    {absyn_root=$1;}

exp:    lvalue     {$$=A_VarExp(EM_tokPos,$1);}
   |    NIL        {$$=A_NilExp(EM_tokPos);}
   |    sequence   {$$=$1;}
   |    no_value   {$$=NULL;}
   |    INT        {$$=A_IntExp(EM_tokPos,$1);}
   |    STRING     {$$=A_StringExp(EM_tokPos,$1);}
   |    negation   {$$=$1;}
   |    function_call {$$=$1;}
   |    record_create {$$=$1;}
   |    array_create  {$$=$1;}
   |    assignment    {$$=$1;}
   |    if_state      {$$=$1;}
   |    while         {$$=$1;}
   |    for           {$$=$1;}
   |    BREAK         {$$=A_BreakExp(EM_tokPos);}
   |    let_exp       {$$=$1;}
   |    parentheses   {$$-$1;}
   |    algebra       {$$=$1;}


algebra: exp OR exp                 {$$=A_OpExp(EM_tokPos,A_orOp,$1,$3);}
       | exp AND exp                {$$=A_OpExp(EM_tokPos,A_andOp,$1,$3);}
       | exp EQ exp                 {$$=A_OpExp(EM_tokPos,A_eqOp,$1,$3);}
       | exp NEQ exp                {$$=A_OpExp(EM_tokPos,A_neqOp,$1,$3);}
       | exp LE exp                 {$$=A_OpExp(EM_tokPos,A_leOp,$1,$3);}
       | exp LT exp                 {$$=A_OpExp(EM_tokPos,A_ltOp,$1,$3);}
       | exp GT exp                 {$$=A_OpExp(EM_tokPos,A_gtOp,$1,$3);}
       | exp GE exp                 {$$=A_OpExp(EM_tokPos,A_geOp,$1,$3);}
       | exp PLUS exp               {$$=A_OpExp(EM_tokPos,A_plusOp,$1,$3);}
       | exp MINUS exp              {$$=A_OpExp(EM_tokPos,A_minusOp,$1,$3);}
       | exp TIMES exp              {$$=A_OpExp(EM_tokPos,A_timesOp,$1,$3);}
       | exp DIVIDE exp             {$$=A_OpExp(EM_tokPos,A_divideOp,$1,$3);}

lvalue: ID                              {$$=A_SimpleVar(EM_tokPos,S_Symbol($1));}
      | lvalue_one                      {$$=$1;}
lvalue_one: lvalue_one DOT ID               {$$=A_FieldVar(EM_tokPos,$1,S_Symbol($3));}
          | lvalue_one LBRACK exp RBRACK    {$$=A_SubscriptVar(EM_tokPos,$1,$3);}
          | ID DOT ID                       {$$=A_FieldVar(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)),S_Symbol($3));}
          | ID LBRACK exp RBRACK            {$$=A_SubscriptVar(EM_tokPos,A_SimpleVar(EM_tokPos,S_Symbol($1)),$3);}


sequence: LPAREN sequence_one RPAREN        {$$=A_SeqExp(EM_tokPos,$2);}
sequence_one: exp sequence_two              {$$=A_ExpList($1,$2);}
sequence_two: SEMICOLON exp sequence_two    {$$=A_ExpList($2,$3);}
            | SEMICOLON exp                 {$$=A_ExpList($2,NULL);}

no_value: LPAREN RPAREN

negation: MINUS exp %prec UMINUS            {$$=A_OpExp(EM_tokPos,A_minusOp,A_IntExp(EM_tokPos,0),$2);}


function_call:  ID LPAREN RPAREN                            {$$=A_CallExp(EM_tokPos,S_Symbol($1),NULL);}
             |  ID LPAREN exp function_call_one RPAREN      {$$=A_CallExp(EM_tokPos,S_Symbol($1),A_ExpList($3,$4));}
function_call_one: %empty                                   {$$=NULL;}
                 | COMMA exp function_call_one              {$$=A_ExpList($2,$3);}

record_create:  ID LBRACE record_create_one RBRACE          {$$=A_RecordExp(EM_tokPos,S_Symbol($1),$3);}
record_create_one: %empty                                   {$$=NULL;}
                 | ID EQ exp record_create_two              {$$=A_EfieldList(A_Efield(S_Symbol($1),$3),$4);}
record_create_two: %empty                                   {$$=NULL;}
                 | COMMA ID EQ exp record_create_two        {$$=A_EfieldList(A_Efield(S_Symbol($2),$4),$5);}

array_create: ID LBRACK exp RBRACK OF exp                   {$$=A_ArrayExp(EM_tokPos,S_Symbol($1),$3,$6);}

assignment: lvalue ASSIGN exp                               {$$=A_AssignExp(EM_tokPos,$1,$3);}

if_state: IF exp THEN exp %prec LOWER_THAN_ELSE             {$$=A_IfExp(EM_tokPos,$2,$4,NULL);}
        | IF exp THEN exp ELSE exp                          {$$=A_IfExp(EM_tokPos,$2,$4,$6);}


while: WHILE exp DO exp                                     {$$=A_WhileExp(EM_tokPos,$2,$4);}

for: FOR ID ASSIGN exp TO exp DO exp                        {$$=A_ForExp(EM_tokPos,S_Symbol($2),$4,$6,$8);}

let_exp: LET decs IN exp_sequence END                       {$$=A_LetExp(EM_tokPos,$2,$4);}
exp_sequence: %empty                                        {$$=NULL;}
            | exp_sequence_one                              {$$=A_SeqExp(EM_tokPos,$1);}
exp_sequence_one: exp SEMICOLON exp_sequence_one            {$$=A_ExpList($1,$3);}
                | exp                                       {$$=A_ExpList($1,NULL);}

decs: dec decs                                              {$$=A_DecList($1,$2);}
    | %empty                                                {$$=NULL;}
dec: tydec                                                  {$$=A_TypeDec(EM_tokPos,$1);}
   | vardec                                                 {$$=$1;}
   | fundec                                                 {$$=A_FunctionDec(EM_tokPos,$1);}

tydec: TYPE ID EQ ty                                        {$$=A_NametyList(A_Namety(S_Symbol($2),$4),NULL);}

ty: ID                                                      {$$=A_NameTy(EM_tokPos,S_Symbol($1));}
  | LBRACE tyfields RBRACE                                  {$$=A_RecordTy(EM_tokPos,$2);}
  | ARRAY OF ID                                             {$$=A_ArrayTy(EM_tokPos,S_Symbol($3));}
tyfields: %empty                                            {$$=NULL;}
        | ID COLON ID tyfields_one                          {$$=A_FieldList(A_Field(EM_tokPos,S_Symbol($1),S_Symbol($3)),$4);}
tyfields_one: %empty                                        {$$=NULL;}
            | COMMA ID COLON ID tyfields_one                {$$=A_FieldList(A_Field(EM_tokPos,S_Symbol($2),S_Symbol($4)),$5);}

vardec: VAR ID ASSIGN exp                                   {$$=A_VarDec(EM_tokPos,S_Symbol($2),S_Symbol(""),$4);}
      | VAR ID COLON ID ASSIGN exp                          {$$=A_VarDec(EM_tokPos,S_Symbol($2),S_Symbol($4),$6);}

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp           {$$=A_FundecList(A_Fundec(EM_tokPos,S_Symbol($2),$4,S_Symbol(""),$7),NULL);}
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  {$$=A_FundecList(A_Fundec(EM_tokPos,S_Symbol($2),$4,S_Symbol($7),$9),NULL);}

parentheses: LPAREN exp RPAREN                              {$$=$2;}
